<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>

using System.Xml.Schema;

namespace XsdIterator 
{
    /// <summary>
    /// Extension method for XmlSchema subtypes, which selects right method
    /// of IXmlSchemaIterator to be called for particular object
    /// </summary>
    public static class XmlSchemaVisitorExtension
    {
        public static void Accept(this object obj, IXmlSchemaIterator iterator)
        {
			var type = obj.GetType();
			switch(obj)
			{
<#
			var types = new[] { 			
								"XmlSchema",
								"XmlSchemaElement",		
								"XmlSchemaComplexType",	
								"XmlSchemaSimpleType",															
								"XmlSchemaSequence",
								"XmlSchemaChoice",
								"XmlSchemaSet",
								"XmlSchemaGroup",								
								"XmlSchemaGroupRef",																	
								"XmlSchemaAny",																
								"XmlSchemaAttribute",																								
								"XmlSchemaComplexContentExtension",																						
								"XmlSchemaObjectCollection",
								"XmlSchemaSimpleContentExtension",								
								"XmlSchemaType",
								"XmlSchemaAppInfo",
								"XmlSchemaDocumentation",
								"XmlSchemaAnnotation",								
								"XmlSchemaParticle",						
								"XmlSchemaObject",
								 };
			foreach(var tp in types)
			{
			#>
				case <#= tp #> item:
					iterator.IterateThrough(item);
					break;
<#			}#>
			}
		}
    }

    /// <summary>
    /// Interface for xsd schema item processor
    /// </summary>
	public interface IXmlSchemaProcessor
    {
	<#
	foreach(var type in types)
	{
	#>
    bool StartProcessing(<#= type #> obj);
        void EndProcessing(<#= type #> obj);		
	<#
	}#>	
	    void StartProcessingChoiceBranch(int nOfBranch, XmlSchemaAnnotated obj);
	    void EndProcessingChoiceBranch(int nOfBranch);
	    void StartProcessingSubstitutionGroup(string name);
        void EndProcessingSubstitutionGroup(string name);
    }

	public interface IXmlSchemaIterator
    {
	<#
	foreach(var type in types)
	{
	#>
	void IterateThrough(<#= type #> obj);		
	<#
	}
	#>               
    }

	/// <summary>
    /// Default implementation of IXmlSchemaProcessor which does nothing. In most cases
    /// you'll need to inherit your processor from this class and override only required
    /// methods
    /// </summary>
	public class XmlSchemaDefaultProcessor : IXmlSchemaProcessor
	{
	<#
	foreach(var type in types)
	{
	#>
	public virtual bool StartProcessing(<#= type #> obj){return true;}
		public virtual void EndProcessing(<#= type #> obj){}
	<#
	}
	#>
    public virtual void StartProcessingChoiceBranch(int nOfBranch, XmlSchemaAnnotated obj){}
		public virtual void EndProcessingChoiceBranch(int nOfBranch){}
	    public virtual void StartProcessingSubstitutionGroup(string name){}
        public virtual void EndProcessingSubstitutionGroup(string name){}
	}

}
